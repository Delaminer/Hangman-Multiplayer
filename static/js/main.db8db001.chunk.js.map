{"version":3,"sources":["Guesses.js","Keyboard.js","Lives.js","Scoreboard.js","Game.js","index.js"],"names":["Guesses","className","style","paddingLeft","paddingRight","this","props","hint","React","Component","Letter","status","onClick","disabled","value","Keyboard","correct","includes","incorrect","rowLengths","keyboard","i","row","letterRow","j","push","renderLetter","String","fromCharCode","Lives","x","path","d","lives","hearts","getHeart","parts","cx","cy","r","x1","y1","x2","y2","partsToShow","slice","concat","stroke","strokeWidth","fill","viewBox","getDrawing","PlayerItem","player","flex","rank","name","score","Scoreboard","game","timeLeft","round","roundsPerGame","players","sort","a","b","map","index","Game","socket","io","forEach","event","on","message","newState","ready","JSON","parse","setState","messageData","customHint","split","join","state","letter","emit","stringify","guess","bg","gameDisplay","backgroundColor","makeGuess","textAlign","restart","hidden","word","guesses","ReactDOM","render","document","getElementById"],"mappings":"qOAIMA,E,4JAEF,WACI,OACI,qBACIC,UAAU,UACVC,MAAO,CAACC,YAAa,EAAGC,aAAc,GAF1C,SAIKC,KAAKC,MAAMC,W,GARNC,IAAMC,WCEtBC,E,4JAEF,WACI,OACI,qBAAKT,UAAU,aAAf,SACI,wBACIA,UAAS,iBAAYI,KAAKC,MAAMK,QAChCC,QAASP,KAAKC,MAAMM,QACpBC,SAAUR,KAAKC,MAAMO,SAHzB,SAKSR,KAAKC,MAAMQ,c,GAVfN,IAAMC,WAkBrBM,E,kKACF,SAAaD,GAAQ,IAAD,OACZH,EAAS,UAQb,OAPIN,KAAKC,MAAMU,QAAQC,SAASH,GAC5BH,EAAS,UAEJN,KAAKC,MAAMY,UAAUD,SAASH,KACnCH,EAAS,aAIT,cAAC,EAAD,CACIG,MAAOA,EAEPF,QAAS,kBAAM,EAAKN,MAAMM,QAAQE,IAClCD,SAAqB,YAAXF,EACVA,OAAUA,GAHLG,K,oBAQjB,WAEI,IAAMK,EAAa,CAAC,EAAG,EAAG,EAAG,GACzBC,EAAW,GACXC,EAAI,EACR,IAAI,IAAIC,KAAOH,EAAY,CAEvB,IADA,IAAII,EAAY,GACRC,EAAI,EAAGA,EAAIL,EAAWG,GAAME,IAChCD,EAAUE,KAAKpB,KAAKqB,aAAaC,OAAOC,aAAa,GAAKP,KAC1DA,IAEJD,EAASK,KACL,qBAAKxB,UAAU,cAAf,SACKsB,GAD6BD,IAM1C,OACI,qBAAKrB,UAAU,WAAf,SACKmB,Q,GAzCMZ,IAAMC,WCnBvBoB,E,8JACF,SAASC,GAEL,IAAMC,EAAI,qBADVD,GAAQ,GACE,gFACV,OACI,4BAEI,sBAAME,EAAGD,KAFLD,K,wBAOhB,SAAWG,GAEP,IADA,IAAIC,EAAS,GACLb,EAAI,EAAGA,EAAIY,EAAOZ,IACtBa,EAAOT,KAAKpB,KAAK8B,SAASd,IAE9B,IAAIe,EAAQ,CAER,wBAAmBC,GAAG,MAAMC,GAAG,QAAQC,EAAE,QAA7B,QACZ,sBAAiBC,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAArC,QACV,sBAAqBH,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAAzC,YACV,sBAAsBH,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAA1C,aACV,sBAAqBH,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAAzC,YACV,sBAAsBH,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAA1C,aAEV,wBAA6BN,GAAG,QAAQC,GAAG,QAAQC,EAAE,OAAzC,kBACZ,wBAA8BF,GAAG,QAAQC,GAAG,QAAQC,EAAE,OAA1C,mBACZ,sBAAwBP,EAAE,+BAAhB,eAEV,sBAA4BQ,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAAhD,mBACV,sBAA4BH,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAAhD,mBAEV,sBAA6BH,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAAjD,oBACV,sBAA6BH,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAAjD,oBAEV,wBAAyBN,GAAG,MAAMC,GAAG,SAASC,EAAE,MAApC,eAEhB,GAAIN,EAAQ,EAAG,CACX,IAAIW,EAAc,GAAKX,EACvBG,EAAQA,EAAMS,MAAM,EAAGD,QAGvBR,EAAQA,EAAMS,MAAM,EAAG,GAAGC,OAAOV,EAAMS,MAAM,EAAG,KAEpD,OACI,sBACI5C,UAAU,UACV8C,OAAO,QACPC,YAAY,IACZC,KAAK,OACLC,QAAQ,cALZ,UAQI,sBAAMV,GAAG,KAAKC,GAAG,MAAMC,GAAG,MAAMC,GAAG,QACnC,sBAAMH,GAAG,MAAMC,GAAG,KAAKC,GAAG,MAAMC,GAAG,QACnC,sBAAMH,GAAG,MAAMC,GAAG,KAAKC,GAAG,MAAMC,GAAG,OACnC,sBAAMH,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,OAEnCP,EAED,mBAAGW,OAAO,OAAOE,KAAK,MAAtB,SACKf,S,oBAMjB,WACI,OACI,qBAAKjC,UAAU,QAAf,SACKI,KAAK8C,WAAW9C,KAAKC,MAAM2B,a,GAvExBzB,IAAMC,W,QCHpB2C,E,4JACF,WACI,OAAI/C,KAAKC,MAAM+C,OAEP,qBAAIpD,UAAU,SAAd,UACI,uBAAMC,MAAO,CAACoD,KAAM,KAApB,cAA4BjD,KAAKC,MAAMiD,QACvC,uBAAMrD,MAAO,CAACoD,KAAM,KAApB,UAA2BjD,KAAKC,MAAMkD,KAAtC,YACA,uBAAMtD,MAAO,CAACoD,KAAM,KAApB,qBAAmCjD,KAAKC,MAAMmD,YAMlD,+BACI,uBAAMvD,MAAO,CAACoD,KAAM,KAApB,cAA4BjD,KAAKC,MAAMiD,QACvC,sBAAMrD,MAAO,CAACoD,KAAM,KAApB,SAA2BjD,KAAKC,MAAMkD,OACtC,uBAAMtD,MAAO,CAACoD,KAAM,KAApB,qBAAmCjD,KAAKC,MAAMmD,gB,GAhBzCjD,IAAMC,WAuBzBiD,E,4JAEF,WAAU,IAAD,OACL,OACI,sBAAKzD,UAAU,iBAAf,UACI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,WAAf,SACKI,KAAKC,MAAMqD,KAAKC,WAErB,qBAAK3D,UAAU,eAAf,SACI,0CACWI,KAAKC,MAAMqD,KAAKE,MAD3B,IACmCxD,KAAKC,MAAMqD,KAAKG,sBAI3D,oBAAI7D,UAAU,cAAd,SACKI,KAAKC,MAAMqD,KAAKI,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAET,MAAQQ,EAAER,SAAOU,KAAI,SAACd,EAAQe,GAAT,OAC3D,cAAC,EAAD,CACIb,KAAMa,EAAQ,EACdZ,KAAMH,EAAOG,KAEbH,OAAQA,EAAOG,OAAS,EAAKlD,MAAM+C,OAAOG,KAC1CC,MAAOJ,EAAOI,OAFTJ,EAAOG,kB,GApBfhD,IAAMC,WClBzB4D,E,kDACF,WAAY/D,GAAQ,IAAD,uBACf,cAAMA,IAGDgE,OAASC,aAAG,4CAIG,CAAC,YAAa,aAAc,eAEpCC,SAAQ,SAAAC,GAChB,EAAKH,OAAOI,GAAGD,GAAO,SAAAE,GAElB,IAAIC,EAAW,CAAEC,OAAO,GACxBD,EAASjB,KAAOmB,KAAKC,MAAMJ,GAG3B,EAAKK,SAASJ,SAjBP,MAsBO,CAAC,OAAQ,QAAS,WAAY,eAEtCJ,SAAQ,SAAAC,GAClB,EAAKH,OAAOI,GAAGD,GAAO,SAAAE,GAElB,IAAIM,EAAcH,KAAKC,MAAMJ,GAGzBC,EAAW,CAAEC,OAAO,GAExBD,EAASjB,KAAOsB,EAAYtB,KAE5BiB,EAASvB,OAAS4B,EAAY5B,OAG1BuB,EAASrE,KAAO0E,EAAYC,WAAWC,MAAM,IAAIC,KAAK,KAK1D,EAAKJ,SAASJ,SAKtB,EAAKS,MAAQ,CACTR,OAAO,GAhDI,E,6CAoDnB,SAAUS,GAEFjF,KAAKgF,MAAMhC,OAAOrC,QAAQC,SAASqE,IAAWjF,KAAKgF,MAAMhC,OAAOnC,UAAUD,SAASqE,IAEvFjF,KAAKiE,OAAOiB,KAAK,QAAST,KAAKU,UAAU,CACrCC,MAAOH,O,oBAIf,WAAU,IAAD,OACL,IAAKjF,KAAKgF,MAAMR,MAAO,MAAO,aAC9B,IAAIF,EAAU,GACVe,EAAK,QACwB,IAA7BrF,KAAKgF,MAAMhC,OAAO1C,SAClBgE,EAAU,WACVe,EAAK,cAEwB,IAA7BrF,KAAKgF,MAAMhC,OAAO1C,SAClBgE,EAAU,YACVe,EAAK,aAGT,IAAIC,EACA,sBAAK1F,UAAU,gBAAgBC,MAAO,CAAC0F,gBAAiBF,GAAxD,UACI,qBAAKxF,MAAO,CAACoD,KAAM,KAAnB,SACI,qBAAKrD,UAAU,SAAf,SACK0E,MAYT,qBAAKzE,MAAO,CAACoD,KAAM,KAAnB,SACI,cAAC,EAAD,CACIrB,MAAO5B,KAAKgF,MAAMhC,OAAOpB,UAGjC,qBAAK/B,MAAO,CAACoD,KAAM,KAAnB,SACI,cAAC,EAAD,CACI/C,KAAMF,KAAKgF,MAAM9E,SAIzB,qBAAKL,MAAO,CAACoD,KAAM,KAAnB,SACI,cAAC,EAAD,CACI1C,QAAS,SAAA0E,GAAM,OAAI,EAAKO,UAAUP,IAClCtE,QAASX,KAAKgF,MAAMhC,OAAOrC,QAC3BE,UAAWb,KAAKgF,MAAMhC,OAAOnC,iBAM7C,OACI,sBAAKjB,UAAU,YAAYC,MAAO,CAAC0F,gBAAiBF,GAApD,UACI,qBAAKzF,UAAU,OAAf,SAEI,cAAC,EAAD,CACI0D,KAAMtD,KAAKgF,MAAM1B,KACjBN,OAAQhD,KAAKgF,MAAMhC,WAG3B,qBAAKpD,UAAU,QAAf,SAIK0F,S,wBAMjB,WAAc,IAAD,OACT,IAAKtF,KAAKgF,MAAMR,MAAO,MAAO,aAC9B,IAAIF,EAAU,GACVe,EAAK,QAUT,OAT0B,IAAtBrF,KAAKgF,MAAM1E,SACXgE,EAAU,WACVe,EAAK,cAEiB,IAAtBrF,KAAKgF,MAAM1E,SACXgE,EAAU,YACVe,EAAK,aAIL,sBAAKzF,UAAU,gBAAgBC,MAAO,CAAC0F,gBAAiBF,GAAxD,UACI,sBAAKxF,MAAO,CAACoD,KAAM,KAAnB,UACI,qBAAKrD,UAAU,SAAf,SACK0E,IAEL,qBAAKzE,MAAO,CAAC4F,UAAW,UAAxB,SACI,wBACI7F,UAAU,UACVW,QAAS,kBAAM,EAAKmF,WACpBC,OAA8B,IAAtB3F,KAAKgF,MAAM1E,OAHvB,6BASR,qBAAKT,MAAO,CAACoD,KAAM,KAAnB,SACI,cAAC,EAAD,CACIrB,MAAO5B,KAAKgF,MAAMpD,UAG1B,qBAAK/B,MAAO,CAACoD,KAAM,KAAnB,SACI,cAAC,EAAD,CACI2C,KAAM5F,KAAKgF,MAAMY,KACjBC,QAAS7F,KAAKgF,MAAMa,QACpBvF,OAAQN,KAAKgF,MAAM1E,WAG3B,qBAAKT,MAAO,CAACoD,KAAM,KAAnB,SACI,cAAC,EAAD,CACI1C,QAAS,SAAA0E,GAAM,OAAI,EAAKO,UAAUP,IAClCW,KAAM5F,KAAKgF,MAAMY,KACjBC,QAAS7F,KAAKgF,MAAMa,mB,GAhLzB1F,IAAMC,W,MCDzB0F,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.db8db001.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Text, View } from 'react-native';\r\n\r\n//Show blanks and what you have guessed correctly ( A _ _ L _ )\r\nclass Guesses extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div \r\n                className='guesses'\r\n                style={{paddingLeft: 5, paddingRight: 5}}\r\n            >\r\n                {this.props.hint}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Guesses };","import React from 'react';\r\n// import { Text, View, TouchableOpacity } from 'react-native';\r\n\r\n//Custom keyboard and letters\r\n\r\n//Define letter\r\nclass Letter extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className='letterBase'>\r\n                <button \r\n                    className={`letter ${this.props.status}`}\r\n                    onClick={this.props.onClick} \r\n                    disabled={this.props.disabled}\r\n                >\r\n                        {this.props.value}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//Define keyboard\r\nclass Keyboard extends React.Component {\r\n    renderLetter(value) {\r\n        let status = 'enabled';\r\n        if (this.props.correct.includes(value)) {\r\n            status = 'correct';\r\n        }\r\n        else if (this.props.incorrect.includes(value)) {\r\n            status = 'incorrect';\r\n        }\r\n\r\n        return (\r\n            <Letter \r\n                value={value} \r\n                key={value}\r\n                onClick={() => this.props.onClick(value)}\r\n                disabled={status !== 'enabled'}\r\n                status = {status}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        //How many letters per row\r\n        const rowLengths = [7, 7, 6, 6];\r\n        let keyboard = [];\r\n        let i = 0;\r\n        for(let row in rowLengths) {\r\n            let letterRow = [];\r\n            for(let j = 0; j < rowLengths[row]; j++) {\r\n                letterRow.push(this.renderLetter(String.fromCharCode(65 + i)));\r\n                i++;\r\n            }\r\n            keyboard.push(\r\n                <div className='keyboardRow' key={row}>\r\n                    {letterRow}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='keyboard'>\r\n                {keyboard}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Keyboard };","import React from 'react';\r\n// import { View } from 'react-native';\r\n// import Svg, {Line, Circle, G, Path} from 'react-native-svg';\r\n\r\n//Displays lives and hangman player UI\r\nclass Lives extends React.Component {\r\n    getHeart(x) {\r\n        x = x * 50;\r\n        const path = `M 25 396 m ${x} 0 l -20 -20 l 20 20 l 20 -20 a 10,10 90 1,0 -20,-20 a 10,10 90 1,0 -20,20 z`;\r\n        return (\r\n            <g key={x}>\r\n            {/* <G style={this.props.styles.heart} key={x}> */}\r\n                <path d={path}/>\r\n            </g>\r\n        );\r\n    }\r\n\r\n    getDrawing(lives) {\r\n        let hearts = [];\r\n        for(let i = 0; i < lives; i++) {\r\n            hearts.push(this.getHeart(i));\r\n        }\r\n        let parts = [\r\n\r\n            <circle key='head' cx='270' cy='137.5' r='37.5'/>,\r\n            <line key='body' x1='270' y1='175' x2='270' y2='275'/>,\r\n            <line key='left leg' x1='270' y1='275' x2='235' y2='330'/>,\r\n            <line key='right leg' x1='270' y1='275' x2='305' y2='330'/>,\r\n            <line key='left arm' x1='270' y1='225' x2='235' y2='180'/>,\r\n            <line key='right arm' x1='270' y1='225' x2='305' y2='180'/>,\r\n            \r\n            <circle key='alive left eye' cx='252.5' cy='127.5' r='7.5' />,\r\n            <circle key='alive right eye' cx='287.5' cy='127.5' r='7.5' />,\r\n            <path key='alive mouth' d='M 255,160 Q 270,150 285,160' />,\r\n\r\n            <line key='dead left eye 1' x1='245' y1='135' x2='260' y2='120'/>,\r\n            <line key='dead left eye 2' x1='260' y1='135' x2='245' y2='120'/>,\r\n\r\n            <line key='dead right eye 1' x1='295' y1='135' x2='280' y2='120'/>,\r\n            <line key='dead right eye 2' x1='280' y1='135' x2='295' y2='120'/>,\r\n\r\n            <circle key='dead mouth' cx='270' cy='156.25' r='10'/>,\r\n        ];\r\n        if (lives > 0) {\r\n            let partsToShow = 10 - lives;\r\n            parts = parts.slice(0, partsToShow);\r\n        }\r\n        else {\r\n            parts = parts.slice(0, 6).concat(parts.slice(9, 14));\r\n        }\r\n        return (\r\n            <svg \r\n                className='drawing'\r\n                stroke='black' \r\n                strokeWidth='2' \r\n                fill='none'\r\n                viewBox='0 0 400 400'\r\n            >\r\n\r\n                <line x1='50' y1='350' x2='150' y2='350'/>\r\n                <line x1='100' y1='50' x2='100' y2='350'/>\r\n                <line x1='100' y1='50' x2='270' y2='50'/>\r\n                <line x1='270' y1='100' x2='270' y2='50'/>\r\n\r\n                {parts}\r\n\r\n                <g stroke='none' fill='red'>\r\n                    {hearts}\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='lives'>\r\n                {this.getDrawing(this.props.lives)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Lives };","import React from 'react';\r\n\r\nclass PlayerItem extends React.Component {\r\n    render() {\r\n        if (this.props.player) {\r\n            return (\r\n                <li className='player'>\r\n                    <span style={{flex: '1'}}>#{this.props.rank}</span>\r\n                    <span style={{flex: '5'}}>{this.props.name} (YOU)</span>\r\n                    <span style={{flex: '3'}}>Points: {this.props.score}</span>\r\n                </li>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <li>\r\n                    <span style={{flex: '1'}}>#{this.props.rank}</span>\r\n                    <span style={{flex: '5'}}>{this.props.name}</span>\r\n                    <span style={{flex: '3'}}>Points: {this.props.score}</span>\r\n                </li>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nclass Scoreboard extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='scoreContainer'>\r\n                <div className='infoTop'>\r\n                    <div className='timeLeft'>\r\n                        {this.props.game.timeLeft}\r\n                    </div>\r\n                    <div className='roundTracker'>\r\n                        <span>\r\n                            Round {this.props.game.round}/{this.props.game.roundsPerGame}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <ul className='leaderboard'>\r\n                    {this.props.game.players.sort((a, b) => b.score - a.score).map((player, index) => \r\n                        <PlayerItem\r\n                            rank={index + 1}\r\n                            name={player.name}\r\n                            key={player.name}\r\n                            player={player.name === this.props.player.name}\r\n                            score={player.score}\r\n                        />\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Scoreboard };","import React from 'react';\r\nimport { Guesses } from './Guesses.js';\r\nimport { Keyboard } from './Keyboard.js';\r\nimport { Lives } from './Lives.js';\r\nimport { io } from 'socket.io-client';\r\nimport { Scoreboard } from './Scoreboard.js';\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        //Connect to Socket.IO server\r\n        this.socket = io('https://Hangman-Server.delaminer.repl.co');\r\n\r\n        //There are many events that send the same data (they just occur as different events), \r\n        // so loop through each one and handle it the same way\r\n        const basicEvents = ['addPlayer', 'timeUpdate', 'scoreUpdate'];\r\n\r\n        basicEvents.forEach(event => {\r\n            this.socket.on(event, message => {\r\n                //Create an object that will hold all changes in state, so the actual state only has to be changed once\r\n                let newState = { ready: true };\r\n                newState.game = JSON.parse(message);\r\n\r\n                //Update the state\r\n                this.setState(newState);\r\n            });\r\n        });\r\n\r\n        //Complex events\r\n        const complexEvents = ['join', 'start', 'newRound', 'guessResult'];\r\n\r\n        complexEvents.forEach(event => {\r\n            this.socket.on(event, message => {\r\n                //Parse the message only once\r\n                let messageData = JSON.parse(message);\r\n\r\n                //Create an object that will hold all changes in state, so the actual state only has to be changed once\r\n                let newState = { ready: true };\r\n                //Get the game\r\n                newState.game = messageData.game;\r\n                //Get the player\r\n                newState.player = messageData.player;\r\n                //Get the custom hint (if in game)\r\n                // if (newState.game.round > 0)\r\n                    newState.hint = messageData.customHint.split('').join(' ');\r\n                // else\r\n                    // newState.hint = 'Please wait';\r\n\r\n                //Update the state\r\n                this.setState(newState);\r\n            });\r\n        });\r\n\r\n        //Set a dummy state so nothing is rendered before data is received\r\n        this.state = {\r\n            ready: false,\r\n        }\r\n    }\r\n\r\n    makeGuess(letter) {\r\n        //Make sure the player hasn't aready guessed this letter\r\n        if (this.state.player.correct.includes(letter) || this.state.player.incorrect.includes(letter)) return;\r\n\r\n        this.socket.emit('guess', JSON.stringify({\r\n            guess: letter,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.ready) return 'Loading...'\r\n        let message = '';\r\n        let bg = 'white';\r\n        if (this.state.player.status === 1) {\r\n            message = 'You won!';\r\n            bg = 'lightgreen';\r\n        }\r\n        if (this.state.player.status === 2) {\r\n            message = 'You lost!';\r\n            bg = 'lightpink';\r\n        }\r\n\r\n        let gameDisplay = (\r\n            <div className='gameContainer' style={{backgroundColor: bg}}>\r\n                <div style={{flex: '2'}}>\r\n                    <div className='status'>\r\n                        {message}\r\n                    </div>\r\n                    {/* <div style={{textAlign: 'center'}}>\r\n                        <button \r\n                            className='restart' \r\n                            onClick={() => this.restart()}\r\n                            hidden={this.state.status === 0}\r\n                        >\r\n                            Play Again\r\n                        </button>\r\n                    </div> */}\r\n                </div>\r\n                <div style={{flex: '6'}}>\r\n                    <Lives \r\n                        lives={this.state.player.lives}\r\n                    />\r\n                </div>\r\n                <div style={{flex: '2'}}>\r\n                    <Guesses \r\n                        hint={this.state.hint}\r\n                        // correct={this.state.player.correct}\r\n                    />\r\n                </div>\r\n                <div style={{flex: '5'}}>\r\n                    <Keyboard \r\n                        onClick={letter => this.makeGuess(letter)} \r\n                        correct={this.state.player.correct}\r\n                        incorrect={this.state.player.incorrect}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className='container' style={{backgroundColor: bg}}>\r\n                <div className='left'>\r\n                    \r\n                    <Scoreboard \r\n                        game={this.state.game}\r\n                        player={this.state.player}\r\n                    />\r\n                </div>\r\n                <div className='right'>\r\n                    {/* <div className='gameContainer'>\r\n\r\n                    </div> */}\r\n                    {gameDisplay}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderGame() {\r\n        if (!this.state.ready) return 'Loading...'\r\n        let message = '';\r\n        let bg = 'white';\r\n        if (this.state.status === 1) {\r\n            message = 'You won!';\r\n            bg = 'lightgreen';\r\n        }\r\n        if (this.state.status === 2) {\r\n            message = 'You lost!';\r\n            bg = 'lightpink';\r\n        }\r\n\r\n        return (\r\n            <div className='gameContainer' style={{backgroundColor: bg}}>\r\n                <div style={{flex: '3'}}>\r\n                    <div className='status'>\r\n                        {message}\r\n                    </div>\r\n                    <div style={{textAlign: 'center'}}>\r\n                        <button \r\n                            className='restart' \r\n                            onClick={() => this.restart()}\r\n                            hidden={this.state.status === 0}\r\n                        >\r\n                            Play Again\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div style={{flex: '5'}}>\r\n                    <Lives \r\n                        lives={this.state.lives}\r\n                    />\r\n                </div>\r\n                <div style={{flex: '2'}}>\r\n                    <Guesses \r\n                        word={this.state.word} \r\n                        guesses={this.state.guesses}\r\n                        status={this.state.status}\r\n                    />\r\n                </div>\r\n                <div style={{flex: '5'}}>\r\n                    <Keyboard \r\n                        onClick={letter => this.makeGuess(letter)} \r\n                        word={this.state.word} \r\n                        guesses={this.state.guesses} \r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Game };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Game } from './Game';\r\nimport './index.css';\r\n  \r\n\r\nReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}